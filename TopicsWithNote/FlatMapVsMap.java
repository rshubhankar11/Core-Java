import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * FlatMapVsMap
 * 
 * In Java, the Stream interface has a map() and flatmap() methods and both have
 * intermediate stream operation and return another stream as method output.
 * Both of the functions map() and flatMap are used for transformation and
 * mapping operations. map() function produces one output for one input value,
 * whereas flatMap() function produces an arbitrary no of values as output (ie
 * zero or more than zero) for each input value.
 * 
 * map():
 * 1.The function passed to map() operation returns a single value for a single
 * input.
 * 2.One-to-one mapping occurs in map().
 * 3.Only perform the mapping.
 * 4.Produce a stream of value.
 * 5.map() is used only for transformation.
 * 
 * flatMap():
 * 1.The function you pass to flatmap() operation returns an arbitrary number of
 * values as the output.
 * 2.One too many mapping occurs in flatMap().
 * 3.Perform mapping as well as flattening.
 * 4.Produce a stream of stream value.
 * 5.flatMap() is used both for transformation and mapping.
 * 
 */
public class FlatMapVsMap {

    public static void main(String[] args) {
        // making the array list object
        ArrayList<String> fruit = new ArrayList<>();
        fruit.add("Apple");
        fruit.add("mango");
        fruit.add("pineapple");
        fruit.add("kiwi");
        System.out.println("List of fruit-" + fruit);

        // lets use map() to convert list of fruit
        List list = fruit.stream()
                .map(s -> s.length())
                .collect(Collectors.toList());
        System.out.println("List generated by map-" + list);

        // making the arraylist object of List of Integer
        List<List<Integer>> number = new ArrayList<>();

        // adding the elements to number arraylist
        number.add(Arrays.asList(1, 2));
        number.add(Arrays.asList(3, 4));
        number.add(Arrays.asList(5, 6));
        number.add(Arrays.asList(7, 8));

        System.out.println("List of list-" + number);

        // using flatmap() to flatten this list
        List<Integer> flatList = number.stream()
                .flatMap(anotherList -> anotherList.stream())
                .collect(Collectors.toList());

        // printing the list
        System.out.println("List generate by flatMap-"
                + flatList);
    }

}